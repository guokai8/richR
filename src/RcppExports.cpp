// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hyper_bench_vector
NumericVector hyper_bench_vector(NumericVector xin, NumericVector yin, double N, double n);
RcppExport SEXP _richR_hyper_bench_vector(SEXP xinSEXP, SEXP yinSEXP, SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xin(xinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(hyper_bench_vector(xin, yin, N, n));
    return rcpp_result_gen;
END_RCPP
}
// name_table
IntegerVector name_table(List lh);
RcppExport SEXP _richR_name_table(SEXP lhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lh(lhSEXP);
    rcpp_result_gen = Rcpp::wrap(name_table(lh));
    return rcpp_result_gen;
END_RCPP
}
// reverseList
List reverseList(const List& lhs);
RcppExport SEXP _richR_reverseList(SEXP lhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type lhs(lhsSEXP);
    rcpp_result_gen = Rcpp::wrap(reverseList(lhs));
    return rcpp_result_gen;
END_RCPP
}
// fast_factor
SEXP fast_factor(SEXP x);
RcppExport SEXP _richR_fast_factor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor(x));
    return rcpp_result_gen;
END_RCPP
}
// sf
List sf(DataFrame& x);
RcppExport SEXP _richR_sf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sf(x));
    return rcpp_result_gen;
END_RCPP
}
// uniq
StringVector uniq(StringVector& xa);
RcppExport SEXP _richR_uniq(SEXP xaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type xa(xaSEXP);
    rcpp_result_gen = Rcpp::wrap(uniq(xa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_richR_hyper_bench_vector", (DL_FUNC) &_richR_hyper_bench_vector, 4},
    {"_richR_name_table", (DL_FUNC) &_richR_name_table, 1},
    {"_richR_reverseList", (DL_FUNC) &_richR_reverseList, 1},
    {"_richR_fast_factor", (DL_FUNC) &_richR_fast_factor, 1},
    {"_richR_sf", (DL_FUNC) &_richR_sf, 1},
    {"_richR_uniq", (DL_FUNC) &_richR_uniq, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_richR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
